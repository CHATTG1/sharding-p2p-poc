// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package proto_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import message "github.com/ethresearch/sharding-p2p-poc/pb/message"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Response_Status int32

const (
	Response_SUCCESS Response_Status = 0
	Response_FAILURE Response_Status = 1
)

var Response_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}
var Response_Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x Response_Status) String() string {
	return proto.EnumName(Response_Status_name, int32(x))
}
func (Response_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{7, 0}
}

// Request
type RPCAddPeerRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int64    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Seed                 int64    `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCAddPeerRequest) Reset()         { *m = RPCAddPeerRequest{} }
func (m *RPCAddPeerRequest) String() string { return proto.CompactTextString(m) }
func (*RPCAddPeerRequest) ProtoMessage()    {}
func (*RPCAddPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{0}
}
func (m *RPCAddPeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCAddPeerRequest.Unmarshal(m, b)
}
func (m *RPCAddPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCAddPeerRequest.Marshal(b, m, deterministic)
}
func (dst *RPCAddPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCAddPeerRequest.Merge(dst, src)
}
func (m *RPCAddPeerRequest) XXX_Size() int {
	return xxx_messageInfo_RPCAddPeerRequest.Size(m)
}
func (m *RPCAddPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCAddPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCAddPeerRequest proto.InternalMessageInfo

func (m *RPCAddPeerRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RPCAddPeerRequest) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RPCAddPeerRequest) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

type RPCSubscribeShardRequest struct {
	ShardIDs             []int64  `protobuf:"varint,1,rep,packed,name=shardIDs,proto3" json:"shardIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCSubscribeShardRequest) Reset()         { *m = RPCSubscribeShardRequest{} }
func (m *RPCSubscribeShardRequest) String() string { return proto.CompactTextString(m) }
func (*RPCSubscribeShardRequest) ProtoMessage()    {}
func (*RPCSubscribeShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{1}
}
func (m *RPCSubscribeShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCSubscribeShardRequest.Unmarshal(m, b)
}
func (m *RPCSubscribeShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCSubscribeShardRequest.Marshal(b, m, deterministic)
}
func (dst *RPCSubscribeShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCSubscribeShardRequest.Merge(dst, src)
}
func (m *RPCSubscribeShardRequest) XXX_Size() int {
	return xxx_messageInfo_RPCSubscribeShardRequest.Size(m)
}
func (m *RPCSubscribeShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCSubscribeShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCSubscribeShardRequest proto.InternalMessageInfo

func (m *RPCSubscribeShardRequest) GetShardIDs() []int64 {
	if m != nil {
		return m.ShardIDs
	}
	return nil
}

type RPCUnsubscribeShardRequest struct {
	ShardIDs             []int64  `protobuf:"varint,1,rep,packed,name=shardIDs,proto3" json:"shardIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCUnsubscribeShardRequest) Reset()         { *m = RPCUnsubscribeShardRequest{} }
func (m *RPCUnsubscribeShardRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUnsubscribeShardRequest) ProtoMessage()    {}
func (*RPCUnsubscribeShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{2}
}
func (m *RPCUnsubscribeShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCUnsubscribeShardRequest.Unmarshal(m, b)
}
func (m *RPCUnsubscribeShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCUnsubscribeShardRequest.Marshal(b, m, deterministic)
}
func (dst *RPCUnsubscribeShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCUnsubscribeShardRequest.Merge(dst, src)
}
func (m *RPCUnsubscribeShardRequest) XXX_Size() int {
	return xxx_messageInfo_RPCUnsubscribeShardRequest.Size(m)
}
func (m *RPCUnsubscribeShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCUnsubscribeShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCUnsubscribeShardRequest proto.InternalMessageInfo

func (m *RPCUnsubscribeShardRequest) GetShardIDs() []int64 {
	if m != nil {
		return m.ShardIDs
	}
	return nil
}

type RPCGetSubscribedShardRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCGetSubscribedShardRequest) Reset()         { *m = RPCGetSubscribedShardRequest{} }
func (m *RPCGetSubscribedShardRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGetSubscribedShardRequest) ProtoMessage()    {}
func (*RPCGetSubscribedShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{3}
}
func (m *RPCGetSubscribedShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCGetSubscribedShardRequest.Unmarshal(m, b)
}
func (m *RPCGetSubscribedShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCGetSubscribedShardRequest.Marshal(b, m, deterministic)
}
func (dst *RPCGetSubscribedShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCGetSubscribedShardRequest.Merge(dst, src)
}
func (m *RPCGetSubscribedShardRequest) XXX_Size() int {
	return xxx_messageInfo_RPCGetSubscribedShardRequest.Size(m)
}
func (m *RPCGetSubscribedShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCGetSubscribedShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCGetSubscribedShardRequest proto.InternalMessageInfo

type RPCBroadcastCollationRequest struct {
	ShardID              int64    `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Number               int64    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Size                 int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Period               int64    `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCBroadcastCollationRequest) Reset()         { *m = RPCBroadcastCollationRequest{} }
func (m *RPCBroadcastCollationRequest) String() string { return proto.CompactTextString(m) }
func (*RPCBroadcastCollationRequest) ProtoMessage()    {}
func (*RPCBroadcastCollationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{4}
}
func (m *RPCBroadcastCollationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCBroadcastCollationRequest.Unmarshal(m, b)
}
func (m *RPCBroadcastCollationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCBroadcastCollationRequest.Marshal(b, m, deterministic)
}
func (dst *RPCBroadcastCollationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCBroadcastCollationRequest.Merge(dst, src)
}
func (m *RPCBroadcastCollationRequest) XXX_Size() int {
	return xxx_messageInfo_RPCBroadcastCollationRequest.Size(m)
}
func (m *RPCBroadcastCollationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCBroadcastCollationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCBroadcastCollationRequest proto.InternalMessageInfo

func (m *RPCBroadcastCollationRequest) GetShardID() int64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *RPCBroadcastCollationRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *RPCBroadcastCollationRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RPCBroadcastCollationRequest) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

type RPCSendCollationRequest struct {
	Collation            *message.Collation `protobuf:"bytes,1,opt,name=collation,proto3" json:"collation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RPCSendCollationRequest) Reset()         { *m = RPCSendCollationRequest{} }
func (m *RPCSendCollationRequest) String() string { return proto.CompactTextString(m) }
func (*RPCSendCollationRequest) ProtoMessage()    {}
func (*RPCSendCollationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{5}
}
func (m *RPCSendCollationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCSendCollationRequest.Unmarshal(m, b)
}
func (m *RPCSendCollationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCSendCollationRequest.Marshal(b, m, deterministic)
}
func (dst *RPCSendCollationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCSendCollationRequest.Merge(dst, src)
}
func (m *RPCSendCollationRequest) XXX_Size() int {
	return xxx_messageInfo_RPCSendCollationRequest.Size(m)
}
func (m *RPCSendCollationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCSendCollationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCSendCollationRequest proto.InternalMessageInfo

func (m *RPCSendCollationRequest) GetCollation() *message.Collation {
	if m != nil {
		return m.Collation
	}
	return nil
}

type RPCStopServerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCStopServerRequest) Reset()         { *m = RPCStopServerRequest{} }
func (m *RPCStopServerRequest) String() string { return proto.CompactTextString(m) }
func (*RPCStopServerRequest) ProtoMessage()    {}
func (*RPCStopServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{6}
}
func (m *RPCStopServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCStopServerRequest.Unmarshal(m, b)
}
func (m *RPCStopServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCStopServerRequest.Marshal(b, m, deterministic)
}
func (dst *RPCStopServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCStopServerRequest.Merge(dst, src)
}
func (m *RPCStopServerRequest) XXX_Size() int {
	return xxx_messageInfo_RPCStopServerRequest.Size(m)
}
func (m *RPCStopServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCStopServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCStopServerRequest proto.InternalMessageInfo

// Response
type Response struct {
	Status               Response_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.rpc.Response_Status" json:"status,omitempty"`
	Message              string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{7}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() Response_Status {
	if m != nil {
		return m.Status
	}
	return Response_SUCCESS
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RPCPlainResponse struct {
	Response             *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RPCPlainResponse) Reset()         { *m = RPCPlainResponse{} }
func (m *RPCPlainResponse) String() string { return proto.CompactTextString(m) }
func (*RPCPlainResponse) ProtoMessage()    {}
func (*RPCPlainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{8}
}
func (m *RPCPlainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCPlainResponse.Unmarshal(m, b)
}
func (m *RPCPlainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCPlainResponse.Marshal(b, m, deterministic)
}
func (dst *RPCPlainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCPlainResponse.Merge(dst, src)
}
func (m *RPCPlainResponse) XXX_Size() int {
	return xxx_messageInfo_RPCPlainResponse.Size(m)
}
func (m *RPCPlainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCPlainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCPlainResponse proto.InternalMessageInfo

func (m *RPCPlainResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type RPCGetSubscribedShardResponse struct {
	Response             *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	ShardIDs             []int64   `protobuf:"varint,2,rep,packed,name=shardIDs,proto3" json:"shardIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RPCGetSubscribedShardResponse) Reset()         { *m = RPCGetSubscribedShardResponse{} }
func (m *RPCGetSubscribedShardResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGetSubscribedShardResponse) ProtoMessage()    {}
func (*RPCGetSubscribedShardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{9}
}
func (m *RPCGetSubscribedShardResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCGetSubscribedShardResponse.Unmarshal(m, b)
}
func (m *RPCGetSubscribedShardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCGetSubscribedShardResponse.Marshal(b, m, deterministic)
}
func (dst *RPCGetSubscribedShardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCGetSubscribedShardResponse.Merge(dst, src)
}
func (m *RPCGetSubscribedShardResponse) XXX_Size() int {
	return xxx_messageInfo_RPCGetSubscribedShardResponse.Size(m)
}
func (m *RPCGetSubscribedShardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCGetSubscribedShardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCGetSubscribedShardResponse proto.InternalMessageInfo

func (m *RPCGetSubscribedShardResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RPCGetSubscribedShardResponse) GetShardIDs() []int64 {
	if m != nil {
		return m.ShardIDs
	}
	return nil
}

type SendRequest struct {
	PeerID               string   `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	MsgType              int64    `protobuf:"varint,3,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRequest) Reset()         { *m = SendRequest{} }
func (m *SendRequest) String() string { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()    {}
func (*SendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{10}
}
func (m *SendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequest.Unmarshal(m, b)
}
func (m *SendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequest.Marshal(b, m, deterministic)
}
func (dst *SendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequest.Merge(dst, src)
}
func (m *SendRequest) XXX_Size() int {
	return xxx_messageInfo_SendRequest.Size(m)
}
func (m *SendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequest proto.InternalMessageInfo

func (m *SendRequest) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *SendRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SendRequest) GetMsgType() int64 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *SendRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SendResponse struct {
	Response             *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Data                 []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SendResponse) Reset()         { *m = SendResponse{} }
func (m *SendResponse) String() string { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()    {}
func (*SendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{11}
}
func (m *SendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendResponse.Unmarshal(m, b)
}
func (m *SendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendResponse.Marshal(b, m, deterministic)
}
func (dst *SendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendResponse.Merge(dst, src)
}
func (m *SendResponse) XXX_Size() int {
	return xxx_messageInfo_SendResponse.Size(m)
}
func (m *SendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendResponse proto.InternalMessageInfo

func (m *SendResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SendResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RPCListPeerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCListPeerRequest) Reset()         { *m = RPCListPeerRequest{} }
func (m *RPCListPeerRequest) String() string { return proto.CompactTextString(m) }
func (*RPCListPeerRequest) ProtoMessage()    {}
func (*RPCListPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{12}
}
func (m *RPCListPeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCListPeerRequest.Unmarshal(m, b)
}
func (m *RPCListPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCListPeerRequest.Marshal(b, m, deterministic)
}
func (dst *RPCListPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCListPeerRequest.Merge(dst, src)
}
func (m *RPCListPeerRequest) XXX_Size() int {
	return xxx_messageInfo_RPCListPeerRequest.Size(m)
}
func (m *RPCListPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCListPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCListPeerRequest proto.InternalMessageInfo

type RPCListPeerResponse struct {
	Response             *Response      `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Peers                *message.Peers `protobuf:"bytes,2,opt,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RPCListPeerResponse) Reset()         { *m = RPCListPeerResponse{} }
func (m *RPCListPeerResponse) String() string { return proto.CompactTextString(m) }
func (*RPCListPeerResponse) ProtoMessage()    {}
func (*RPCListPeerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{13}
}
func (m *RPCListPeerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCListPeerResponse.Unmarshal(m, b)
}
func (m *RPCListPeerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCListPeerResponse.Marshal(b, m, deterministic)
}
func (dst *RPCListPeerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCListPeerResponse.Merge(dst, src)
}
func (m *RPCListPeerResponse) XXX_Size() int {
	return xxx_messageInfo_RPCListPeerResponse.Size(m)
}
func (m *RPCListPeerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCListPeerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCListPeerResponse proto.InternalMessageInfo

func (m *RPCListPeerResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RPCListPeerResponse) GetPeers() *message.Peers {
	if m != nil {
		return m.Peers
	}
	return nil
}

type RPCListTopicPeerRequest struct {
	Topics               []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCListTopicPeerRequest) Reset()         { *m = RPCListTopicPeerRequest{} }
func (m *RPCListTopicPeerRequest) String() string { return proto.CompactTextString(m) }
func (*RPCListTopicPeerRequest) ProtoMessage()    {}
func (*RPCListTopicPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{14}
}
func (m *RPCListTopicPeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCListTopicPeerRequest.Unmarshal(m, b)
}
func (m *RPCListTopicPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCListTopicPeerRequest.Marshal(b, m, deterministic)
}
func (dst *RPCListTopicPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCListTopicPeerRequest.Merge(dst, src)
}
func (m *RPCListTopicPeerRequest) XXX_Size() int {
	return xxx_messageInfo_RPCListTopicPeerRequest.Size(m)
}
func (m *RPCListTopicPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCListTopicPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCListTopicPeerRequest proto.InternalMessageInfo

func (m *RPCListTopicPeerRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type RPCListTopicPeerResponse struct {
	Response             *Response                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	TopicPeers           map[string]*message.Peers `protobuf:"bytes,2,rep,name=topicPeers,proto3" json:"topicPeers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RPCListTopicPeerResponse) Reset()         { *m = RPCListTopicPeerResponse{} }
func (m *RPCListTopicPeerResponse) String() string { return proto.CompactTextString(m) }
func (*RPCListTopicPeerResponse) ProtoMessage()    {}
func (*RPCListTopicPeerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{15}
}
func (m *RPCListTopicPeerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCListTopicPeerResponse.Unmarshal(m, b)
}
func (m *RPCListTopicPeerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCListTopicPeerResponse.Marshal(b, m, deterministic)
}
func (dst *RPCListTopicPeerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCListTopicPeerResponse.Merge(dst, src)
}
func (m *RPCListTopicPeerResponse) XXX_Size() int {
	return xxx_messageInfo_RPCListTopicPeerResponse.Size(m)
}
func (m *RPCListTopicPeerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCListTopicPeerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCListTopicPeerResponse proto.InternalMessageInfo

func (m *RPCListTopicPeerResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RPCListTopicPeerResponse) GetTopicPeers() map[string]*message.Peers {
	if m != nil {
		return m.TopicPeers
	}
	return nil
}

type RPCRemovePeerRequest struct {
	PeerID               string   `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCRemovePeerRequest) Reset()         { *m = RPCRemovePeerRequest{} }
func (m *RPCRemovePeerRequest) String() string { return proto.CompactTextString(m) }
func (*RPCRemovePeerRequest) ProtoMessage()    {}
func (*RPCRemovePeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_db036003c8440bb3, []int{16}
}
func (m *RPCRemovePeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCRemovePeerRequest.Unmarshal(m, b)
}
func (m *RPCRemovePeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCRemovePeerRequest.Marshal(b, m, deterministic)
}
func (dst *RPCRemovePeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRemovePeerRequest.Merge(dst, src)
}
func (m *RPCRemovePeerRequest) XXX_Size() int {
	return xxx_messageInfo_RPCRemovePeerRequest.Size(m)
}
func (m *RPCRemovePeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRemovePeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRemovePeerRequest proto.InternalMessageInfo

func (m *RPCRemovePeerRequest) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCAddPeerRequest)(nil), "proto.rpc.RPCAddPeerRequest")
	proto.RegisterType((*RPCSubscribeShardRequest)(nil), "proto.rpc.RPCSubscribeShardRequest")
	proto.RegisterType((*RPCUnsubscribeShardRequest)(nil), "proto.rpc.RPCUnsubscribeShardRequest")
	proto.RegisterType((*RPCGetSubscribedShardRequest)(nil), "proto.rpc.RPCGetSubscribedShardRequest")
	proto.RegisterType((*RPCBroadcastCollationRequest)(nil), "proto.rpc.RPCBroadcastCollationRequest")
	proto.RegisterType((*RPCSendCollationRequest)(nil), "proto.rpc.RPCSendCollationRequest")
	proto.RegisterType((*RPCStopServerRequest)(nil), "proto.rpc.RPCStopServerRequest")
	proto.RegisterType((*Response)(nil), "proto.rpc.Response")
	proto.RegisterType((*RPCPlainResponse)(nil), "proto.rpc.RPCPlainResponse")
	proto.RegisterType((*RPCGetSubscribedShardResponse)(nil), "proto.rpc.RPCGetSubscribedShardResponse")
	proto.RegisterType((*SendRequest)(nil), "proto.rpc.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "proto.rpc.SendResponse")
	proto.RegisterType((*RPCListPeerRequest)(nil), "proto.rpc.RPCListPeerRequest")
	proto.RegisterType((*RPCListPeerResponse)(nil), "proto.rpc.RPCListPeerResponse")
	proto.RegisterType((*RPCListTopicPeerRequest)(nil), "proto.rpc.RPCListTopicPeerRequest")
	proto.RegisterType((*RPCListTopicPeerResponse)(nil), "proto.rpc.RPCListTopicPeerResponse")
	proto.RegisterMapType((map[string]*message.Peers)(nil), "proto.rpc.RPCListTopicPeerResponse.TopicPeersEntry")
	proto.RegisterType((*RPCRemovePeerRequest)(nil), "proto.rpc.RPCRemovePeerRequest")
	proto.RegisterEnum("proto.rpc.Response_Status", Response_Status_name, Response_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PocClient is the client API for Poc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PocClient interface {
	AddPeer(ctx context.Context, in *RPCAddPeerRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error)
	SubscribeShard(ctx context.Context, in *RPCSubscribeShardRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error)
	UnsubscribeShard(ctx context.Context, in *RPCUnsubscribeShardRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error)
	GetSubscribedShard(ctx context.Context, in *RPCGetSubscribedShardRequest, opts ...grpc.CallOption) (*RPCGetSubscribedShardResponse, error)
	BroadcastCollation(ctx context.Context, in *RPCBroadcastCollationRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error)
	SendCollation(ctx context.Context, in *RPCSendCollationRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error)
	StopServer(ctx context.Context, in *RPCStopServerRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	ListPeer(ctx context.Context, in *RPCListPeerRequest, opts ...grpc.CallOption) (*RPCListPeerResponse, error)
	ListTopicPeer(ctx context.Context, in *RPCListTopicPeerRequest, opts ...grpc.CallOption) (*RPCListTopicPeerResponse, error)
	RemovePeer(ctx context.Context, in *RPCRemovePeerRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error)
}

type pocClient struct {
	cc *grpc.ClientConn
}

func NewPocClient(cc *grpc.ClientConn) PocClient {
	return &pocClient{cc}
}

func (c *pocClient) AddPeer(ctx context.Context, in *RPCAddPeerRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error) {
	out := new(RPCPlainResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) SubscribeShard(ctx context.Context, in *RPCSubscribeShardRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error) {
	out := new(RPCPlainResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/SubscribeShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) UnsubscribeShard(ctx context.Context, in *RPCUnsubscribeShardRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error) {
	out := new(RPCPlainResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/UnsubscribeShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) GetSubscribedShard(ctx context.Context, in *RPCGetSubscribedShardRequest, opts ...grpc.CallOption) (*RPCGetSubscribedShardResponse, error) {
	out := new(RPCGetSubscribedShardResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/GetSubscribedShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) BroadcastCollation(ctx context.Context, in *RPCBroadcastCollationRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error) {
	out := new(RPCPlainResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/BroadcastCollation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) SendCollation(ctx context.Context, in *RPCSendCollationRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error) {
	out := new(RPCPlainResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/SendCollation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) StopServer(ctx context.Context, in *RPCStopServerRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error) {
	out := new(RPCPlainResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) ListPeer(ctx context.Context, in *RPCListPeerRequest, opts ...grpc.CallOption) (*RPCListPeerResponse, error) {
	out := new(RPCListPeerResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/ListPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) ListTopicPeer(ctx context.Context, in *RPCListTopicPeerRequest, opts ...grpc.CallOption) (*RPCListTopicPeerResponse, error) {
	out := new(RPCListTopicPeerResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/ListTopicPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocClient) RemovePeer(ctx context.Context, in *RPCRemovePeerRequest, opts ...grpc.CallOption) (*RPCPlainResponse, error) {
	out := new(RPCPlainResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.Poc/RemovePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PocServer is the server API for Poc service.
type PocServer interface {
	AddPeer(context.Context, *RPCAddPeerRequest) (*RPCPlainResponse, error)
	SubscribeShard(context.Context, *RPCSubscribeShardRequest) (*RPCPlainResponse, error)
	UnsubscribeShard(context.Context, *RPCUnsubscribeShardRequest) (*RPCPlainResponse, error)
	GetSubscribedShard(context.Context, *RPCGetSubscribedShardRequest) (*RPCGetSubscribedShardResponse, error)
	BroadcastCollation(context.Context, *RPCBroadcastCollationRequest) (*RPCPlainResponse, error)
	SendCollation(context.Context, *RPCSendCollationRequest) (*RPCPlainResponse, error)
	StopServer(context.Context, *RPCStopServerRequest) (*RPCPlainResponse, error)
	Send(context.Context, *SendRequest) (*SendResponse, error)
	ListPeer(context.Context, *RPCListPeerRequest) (*RPCListPeerResponse, error)
	ListTopicPeer(context.Context, *RPCListTopicPeerRequest) (*RPCListTopicPeerResponse, error)
	RemovePeer(context.Context, *RPCRemovePeerRequest) (*RPCPlainResponse, error)
}

func RegisterPocServer(s *grpc.Server, srv PocServer) {
	s.RegisterService(&_Poc_serviceDesc, srv)
}

func _Poc_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCAddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).AddPeer(ctx, req.(*RPCAddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_SubscribeShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCSubscribeShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).SubscribeShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/SubscribeShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).SubscribeShard(ctx, req.(*RPCSubscribeShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_UnsubscribeShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCUnsubscribeShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).UnsubscribeShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/UnsubscribeShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).UnsubscribeShard(ctx, req.(*RPCUnsubscribeShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_GetSubscribedShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCGetSubscribedShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).GetSubscribedShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/GetSubscribedShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).GetSubscribedShard(ctx, req.(*RPCGetSubscribedShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_BroadcastCollation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCBroadcastCollationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).BroadcastCollation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/BroadcastCollation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).BroadcastCollation(ctx, req.(*RPCBroadcastCollationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_SendCollation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCSendCollationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).SendCollation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/SendCollation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).SendCollation(ctx, req.(*RPCSendCollationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCStopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).StopServer(ctx, req.(*RPCStopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_ListPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCListPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).ListPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/ListPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).ListPeer(ctx, req.(*RPCListPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_ListTopicPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCListTopicPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).ListTopicPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/ListTopicPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).ListTopicPeer(ctx, req.(*RPCListTopicPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poc_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRemovePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.Poc/RemovePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocServer).RemovePeer(ctx, req.(*RPCRemovePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Poc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rpc.Poc",
	HandlerType: (*PocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPeer",
			Handler:    _Poc_AddPeer_Handler,
		},
		{
			MethodName: "SubscribeShard",
			Handler:    _Poc_SubscribeShard_Handler,
		},
		{
			MethodName: "UnsubscribeShard",
			Handler:    _Poc_UnsubscribeShard_Handler,
		},
		{
			MethodName: "GetSubscribedShard",
			Handler:    _Poc_GetSubscribedShard_Handler,
		},
		{
			MethodName: "BroadcastCollation",
			Handler:    _Poc_BroadcastCollation_Handler,
		},
		{
			MethodName: "SendCollation",
			Handler:    _Poc_SendCollation_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _Poc_StopServer_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Poc_Send_Handler,
		},
		{
			MethodName: "ListPeer",
			Handler:    _Poc_ListPeer_Handler,
		},
		{
			MethodName: "ListTopicPeer",
			Handler:    _Poc_ListTopicPeer_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _Poc_RemovePeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_db036003c8440bb3) }

var fileDescriptor_rpc_db036003c8440bb3 = []byte{
	// 810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x4f, 0xf3, 0x36,
	0x14, 0xa6, 0x2d, 0xf4, 0xe3, 0x14, 0x58, 0x67, 0xaa, 0x12, 0x65, 0xc0, 0x90, 0xd1, 0xb4, 0x6a,
	0x12, 0xa9, 0x56, 0x24, 0xc4, 0x76, 0x35, 0x96, 0xc1, 0x84, 0xe0, 0x22, 0x73, 0x40, 0x9a, 0xa6,
	0xdd, 0xa4, 0x89, 0xd5, 0x46, 0x6b, 0x93, 0xcc, 0x76, 0x91, 0x40, 0xfc, 0x92, 0xfd, 0xcf, 0xdd,
	0x4f, 0x76, 0x3e, 0x9a, 0xa4, 0xed, 0xfa, 0xbe, 0xbd, 0xb2, 0x8f, 0x7d, 0xce, 0x73, 0x7c, 0x9e,
	0xf3, 0x61, 0x68, 0xb1, 0xc8, 0x35, 0x22, 0x16, 0x8a, 0x10, 0xb5, 0xd4, 0x62, 0xb0, 0xc8, 0xd5,
	0x7f, 0x1a, 0xfb, 0x62, 0x32, 0x1f, 0x19, 0x6e, 0x38, 0x1b, 0x50, 0x31, 0x61, 0x94, 0x53, 0x87,
	0xb9, 0x93, 0x01, 0x9f, 0x38, 0xcc, 0xf3, 0x83, 0xf1, 0x65, 0x34, 0x8c, 0x2e, 0xa3, 0xd0, 0x1d,
	0x44, 0xa3, 0xc1, 0x8c, 0x72, 0xee, 0x8c, 0x69, 0xba, 0xc6, 0x60, 0xf8, 0x11, 0xbe, 0x24, 0x96,
	0x79, 0xeb, 0x79, 0x16, 0xa5, 0x8c, 0xd0, 0xbf, 0xe7, 0x94, 0x0b, 0x74, 0x08, 0x55, 0x3f, 0xd2,
	0x2a, 0xe7, 0x95, 0x7e, 0x8b, 0x54, 0xfd, 0x08, 0x21, 0xd8, 0x8d, 0x42, 0x26, 0xb4, 0xea, 0x79,
	0xa5, 0x5f, 0x23, 0x6a, 0x2f, 0xcf, 0x38, 0xa5, 0x9e, 0x56, 0x8b, 0xcf, 0xe4, 0x1e, 0x5f, 0x83,
	0x46, 0x2c, 0xd3, 0x9e, 0x8f, 0xb8, 0xcb, 0xfc, 0x11, 0xb5, 0xe5, 0x2b, 0x52, 0x4c, 0x1d, 0x9a,
	0xea, 0x55, 0x0f, 0xbf, 0x70, 0xad, 0x72, 0x5e, 0xeb, 0xd7, 0x48, 0x26, 0xe3, 0x1b, 0xd0, 0x89,
	0x65, 0xbe, 0x04, 0xfc, 0xb3, 0x2d, 0xcf, 0xe0, 0x84, 0x58, 0xe6, 0xaf, 0x54, 0x64, 0x4e, 0xbd,
	0xbc, 0x2d, 0xfe, 0x50, 0xf7, 0x3f, 0xb3, 0xd0, 0xf1, 0x5c, 0x87, 0x0b, 0x33, 0x9c, 0x4e, 0x1d,
	0xe1, 0x87, 0x41, 0x8a, 0xad, 0x41, 0x23, 0xc1, 0x52, 0xe1, 0xd6, 0x48, 0x2a, 0xa2, 0x1e, 0xd4,
	0x83, 0xf9, 0x6c, 0x44, 0x59, 0x12, 0x75, 0x22, 0xa9, 0xb8, 0xfd, 0x77, 0x9a, 0xc5, 0xed, 0xbf,
	0x53, 0xa9, 0x1b, 0x51, 0xe6, 0x87, 0x9e, 0xb6, 0x1b, 0xeb, 0xc6, 0x12, 0xfe, 0x0d, 0x8e, 0x25,
	0x1f, 0x34, 0xf0, 0x96, 0x1c, 0x5f, 0x43, 0xcb, 0x4d, 0xcf, 0x94, 0xeb, 0xf6, 0x50, 0x8b, 0x53,
	0x62, 0xa4, 0x09, 0x5a, 0xd8, 0x2c, 0x54, 0x71, 0x0f, 0xba, 0x12, 0x52, 0x84, 0x91, 0x4d, 0xd9,
	0x6b, 0x96, 0x32, 0xfc, 0x01, 0x4d, 0x42, 0x79, 0x14, 0x06, 0x9c, 0xa2, 0x21, 0xd4, 0xb9, 0x70,
	0xc4, 0x9c, 0x2b, 0xe0, 0xc3, 0xa1, 0x6e, 0x64, 0x15, 0x63, 0xa4, 0x4a, 0x86, 0xad, 0x34, 0x48,
	0xa2, 0x29, 0x89, 0x48, 0xfc, 0xaa, 0x78, 0x5b, 0x24, 0x15, 0x31, 0x86, 0x7a, 0xac, 0x8b, 0xda,
	0xd0, 0xb0, 0x5f, 0x4c, 0xf3, 0xce, 0xb6, 0x3b, 0x3b, 0x52, 0xb8, 0xbf, 0x7d, 0x78, 0x7a, 0x21,
	0x77, 0x9d, 0x0a, 0x36, 0xa1, 0x43, 0x2c, 0xd3, 0x9a, 0x3a, 0x7e, 0x90, 0xbd, 0x62, 0x00, 0x4d,
	0x96, 0xec, 0x93, 0x00, 0x8f, 0x56, 0xbc, 0x83, 0x64, 0x4a, 0x78, 0x0a, 0xa7, 0x6b, 0x72, 0xb9,
	0x25, 0x62, 0xa1, 0x72, 0xaa, 0xa5, 0xca, 0xf1, 0xa1, 0x2d, 0x13, 0x93, 0xe6, 0x43, 0xa5, 0x90,
	0xb2, 0xa4, 0x0e, 0x5a, 0x24, 0x91, 0x50, 0x17, 0xf6, 0x44, 0x18, 0xf9, 0x6e, 0xc2, 0x4a, 0x2c,
	0x28, 0xb6, 0xf8, 0xf8, 0xf9, 0x2d, 0x4a, 0xeb, 0x20, 0x15, 0x65, 0x79, 0x78, 0x8e, 0x70, 0x54,
	0x21, 0xec, 0x13, 0xb5, 0xc7, 0x36, 0xec, 0xc7, 0xae, 0xb6, 0x8d, 0x23, 0x05, 0xad, 0xe6, 0x40,
	0xbb, 0x80, 0x88, 0x65, 0x3e, 0xf9, 0x5c, 0xe4, 0x3a, 0x17, 0x33, 0x38, 0x2a, 0x9c, 0x6e, 0xeb,
	0xf1, 0x3b, 0xd8, 0x93, 0x04, 0x70, 0xe5, 0xb2, 0x3d, 0xec, 0x96, 0x4a, 0x53, 0x82, 0x73, 0x12,
	0xab, 0xe0, 0xef, 0x55, 0x95, 0x4b, 0x9f, 0xcf, 0x92, 0x9c, 0xfc, 0x20, 0xe9, 0x41, 0x5d, 0x11,
	0x16, 0x37, 0x6e, 0x8b, 0x24, 0x12, 0xfe, 0xb7, 0xa2, 0x26, 0x45, 0xc9, 0x66, 0xdb, 0xc7, 0xda,
	0x00, 0x22, 0x45, 0x89, 0x13, 0xdd, 0x1e, 0x5e, 0xe5, 0x4d, 0xd6, 0x78, 0x32, 0xb2, 0x13, 0x7e,
	0x17, 0x08, 0xf6, 0x46, 0x72, 0x30, 0xba, 0x0d, 0x5f, 0x94, 0xae, 0x51, 0x07, 0x6a, 0x7f, 0xd1,
	0xb7, 0xa4, 0x40, 0xe4, 0x56, 0xd2, 0xf4, 0xea, 0x4c, 0xe7, 0xf4, 0xff, 0x69, 0x52, 0x2a, 0x3f,
	0x56, 0x6f, 0x2a, 0xd8, 0x50, 0xdd, 0x4b, 0xe8, 0x2c, 0x7c, 0xa5, 0x25, 0x9e, 0x56, 0x55, 0xdf,
	0xf0, 0x9f, 0x06, 0xd4, 0xac, 0xd0, 0x45, 0xf7, 0xd0, 0x48, 0x46, 0x34, 0x3a, 0x29, 0x06, 0x56,
	0x9c, 0xdc, 0xfa, 0x57, 0xc5, 0xdb, 0x42, 0x47, 0xe2, 0x1d, 0xf4, 0x0c, 0x87, 0xc5, 0xe9, 0x8c,
	0x2e, 0x8a, 0x06, 0x2b, 0x67, 0xf7, 0x26, 0xd4, 0xdf, 0xa1, 0x53, 0x9e, 0xdd, 0xe8, 0x9b, 0xa2,
	0xc9, 0x9a, 0xd9, 0xbe, 0x09, 0xd9, 0x07, 0xb4, 0x3c, 0x0f, 0xd0, 0xb7, 0x45, 0xa3, 0xb5, 0xd3,
	0x5f, 0xef, 0x6f, 0x56, 0xcc, 0x5c, 0xfd, 0x09, 0x68, 0xf9, 0x9b, 0x28, 0xbb, 0x5a, 0xfb, 0x91,
	0x6c, 0x0a, 0x84, 0xc0, 0x41, 0xe1, 0x1b, 0x40, 0xb8, 0xc4, 0xfb, 0x8a, 0x3f, 0x62, 0x13, 0xe6,
	0x13, 0xc0, 0xe2, 0x1f, 0x40, 0x5f, 0x97, 0x00, 0xcb, 0x3f, 0xc4, 0x26, 0xb4, 0x1f, 0x60, 0x57,
	0x3e, 0x02, 0xf5, 0x72, 0x6a, 0xb9, 0x01, 0xa9, 0x1f, 0x2f, 0x9d, 0x67, 0xa6, 0x8f, 0xd0, 0x4c,
	0x27, 0x0e, 0x3a, 0x5d, 0xee, 0xbb, 0x7c, 0x7d, 0x9e, 0xad, 0xbb, 0xce, 0xc0, 0xfe, 0x80, 0x83,
	0x42, 0xb3, 0x96, 0x99, 0x5a, 0x35, 0x67, 0xf4, 0x8b, 0x4f, 0xe8, 0xf6, 0x98, 0xb1, 0x45, 0xef,
	0x95, 0x19, 0x5b, 0xea, 0xca, 0x0d, 0x8c, 0x8d, 0xea, 0xea, 0xf6, 0xea, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0x1e, 0x04, 0x92, 0x9b, 0x09, 0x00, 0x00,
}
