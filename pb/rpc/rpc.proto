syntax = "proto3";

package proto.rpc;

import "github.com/ethresearch/sharding-p2p-poc/pb/message/message.proto";

service Poc {
  rpc AddPeer (RPCAddPeerRequest) returns (RPCPlainResponse) {}
  rpc SubscribeShard(RPCSubscribeShardRequest) returns (RPCPlainResponse) {}
  rpc UnsubscribeShard(RPCUnsubscribeShardRequest) returns (RPCPlainResponse) {}
  rpc GetSubscribedShard(RPCGetSubscribedShardRequest) returns (RPCGetSubscribedShardResponse) {}
  rpc BroadcastCollation(RPCBroadcastCollationRequest) returns (RPCPlainResponse) {}
  rpc SendCollation(RPCSendCollationRequest) returns (RPCPlainResponse) {}
  rpc StopServer(RPCStopServerRequest) returns (RPCPlainResponse) {}
  rpc Send (SendRequest) returns (SendResponse) {}
  rpc ListPeer(RPCListPeerRequest) returns (RPCListPeerResponse) {}
  rpc ListTopicPeer(RPCListTopicPeerRequest) returns (RPCListTopicPeerResponse) {}
  rpc RemovePeer(RPCRemovePeerRequest) returns (RPCPlainResponse) {}
}

// Request
message RPCAddPeerRequest {
  string ip = 1;
  int64 port = 2;
  int64 seed = 3;
}
message RPCSubscribeShardRequest {
  repeated int64 shardIDs = 1;
}
message RPCUnsubscribeShardRequest {
  repeated int64 shardIDs = 1;
}
message RPCGetSubscribedShardRequest {
}
message RPCBroadcastCollationRequest {
  int64 shardID = 1;
  int64 number = 2;
  int64 size = 3;
  int64 period = 4;
}
message RPCSendCollationRequest {
  proto.message.Collation collation = 1;
}
message RPCStopServerRequest {
}

// Response
message Response {
  Status status = 1;
  string message = 2;

  enum Status {
      SUCCESS = 0;
      FAILURE = 1;
  }
}
message RPCPlainResponse {
  Response response = 1;
}
message RPCGetSubscribedShardResponse {
  Response response = 1;
  repeated int64 shardIDs = 2;
}

message SendRequest {
  string peerID = 1;  // empty string indicates it is a broadcast
  string topic = 2;  // topic for broadcast usage
  int64 msgType = 3;  // message type of the data
  bytes data = 4;
}

message SendResponse {
  Response response = 1;
  bytes data = 2;
}

message RPCListPeerRequest {
}
message RPCListPeerResponse {
  Response response = 1;
  proto.message.Peers peers = 2;
}

message RPCListTopicPeerRequest {
  repeated string topics = 1;
}
message RPCListTopicPeerResponse {
  Response response = 1;
  map<string, proto.message.Peers> topicPeers = 2;
}

message RPCRemovePeerRequest {
  string peerID = 1;
}
